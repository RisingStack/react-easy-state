{"version":3,"sources":["api.js","store.js","components/Type.js","components/Card.js","components/List.js","components/Attack.js","components/Modal.js","App.js","index.js"],"names":["httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","fetchList","a","query","gql","result","data","pokemons","fetchPokemon","id","pokemon","pokedex","store","isModalOpen","isPokemonsLoading","selectedPokemon","isSelectedPokemonLoading","api","hideModal","showModal","Type","type","className","toLowerCase","view","name","image","classification","types","mini","onClick","src","map","key","Card","Attack","attack","damage","weight","height","resistant","weaknesses","maxCP","maxHP","fleeRate","evolutions","evolutionRequirements","attacks","e","stopPropagation","minimum","maximum","item","amount","fast","special","useEffect","href","Modal","List","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c09b4e9.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nconst httpLink = createHttpLink({\n  uri: 'https://graphql-pokemon.now.sh/',\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nexport const fetchList = async () => {\n  const result = await client.query({\n    query: gql`\n      {\n        pokemons(first: 10000) {\n          id\n          name\n          image\n          classification\n          types\n        }\n      }\n    `,\n  });\n\n  return result.data.pokemons;\n};\n\nexport const fetchPokemon = async id => {\n  const result = await client.query({\n    query: gql`\n        {\n          pokemon(id: \"${id}\") {\n            id\n            name\n            image\n            classification\n            types\n            weight {\n              minimum\n              maximum\n            }\n            height {\n              minimum\n              maximum\n            }\n            resistant\n            attacks {\n              fast {\n                name\n                type\n                damage\n              }\n              special {\n                name\n                type\n                damage\n              }\n            }\n            weaknesses\n            fleeRate\n            maxCP\n            maxHP\n            evolutions {\n              id\n              name\n              image\n            }\n            evolutionRequirements {\n              amount\n              name\n            }\n          }\n        }\n      `,\n  });\n\n  return result.data.pokemon;\n};\n","import { store } from 'react-easy-state';\nimport * as api from './api';\n\nconst pokedex = store({\n  isModalOpen: false,\n  pokemons: [],\n  isPokemonsLoading: true,\n  selectedPokemon: null,\n  isSelectedPokemonLoading: true,\n  async fetchList() {\n    pokedex.isPokemonsLoading = true;\n    pokedex.pokemons = await api.fetchList();\n    pokedex.isPokemonsLoading = false;\n  },\n  async fetchPokemon(id) {\n    pokedex.isSelectedPokemonLoading = true;\n    pokedex.selectedPokemon = await api.fetchPokemon(id);\n    pokedex.isSelectedPokemonLoading = false;\n  },\n  hideModal() {\n    pokedex.isModalOpen = false;\n  },\n  showModal() {\n    pokedex.isModalOpen = true;\n  },\n});\n\nexport default pokedex;\n","import React from 'react';\n\nexport const Type = type => {\n  return (\n    <div className={`type type-${type.type.toLowerCase()}`}>\n      <p>{type.type}</p>\n    </div>\n  );\n};\n\nexport default Type;\n","import React from 'react';\nimport { view } from 'react-easy-state';\nimport Type from './Type';\nimport pokedex from '../store';\n\nexport default view(\n  ({ id, name, image, classification, types, mini }) => (\n    <div\n      className={`pokemon-card ${mini && 'pokemon-card-mini'}`}\n      onClick={() => {\n        pokedex.fetchPokemon(id);\n        pokedex.showModal();\n      }}\n    >\n      <img src={image} />\n      <h2>{name}</h2>\n      {!mini && (\n        <>\n          <p className=\"classification\">{classification}</p>\n          <div className=\"type-container\">\n            {types.map(type => (\n              <Type key={type} type={type} />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  ),\n);\n","import React from 'react';\nimport { view } from 'react-easy-state';\nimport pokedex from '../store';\nimport Card from './Card';\n\nexport default view(() => {\n  return (\n    <>\n      {pokedex.pokemons.map(pokemon => (\n        <Card key={pokemon.id} {...pokemon} />\n      ))}\n    </>\n  );\n});\n","import React from 'react';\nimport { view } from 'react-easy-state';\nimport Type from './Type';\n\nexport const Attack = view(attack => {\n  const { name, damage, type } = attack.attack;\n  return (\n    <div className=\"attack\">\n      <div>\n        <b>{name}</b>\n        <p>Damage: {damage}</p>\n      </div>\n      <Type type={type} />\n    </div>\n  );\n});\n\nexport default Attack;\n","import React from 'react';\nimport { view } from 'react-easy-state';\nimport pokedex from '../store';\nimport Attack from './Attack';\nimport Type from './Type';\nimport Card from './Card';\n\nexport default view(() => {\n  if (!pokedex.selectedPokemon) return null;\n\n  const {\n    image,\n    name,\n    weight,\n    height,\n    types,\n    classification,\n    resistant,\n    weaknesses,\n    maxCP,\n    maxHP,\n    fleeRate,\n    evolutions,\n    evolutionRequirements,\n    attacks,\n  } = pokedex.selectedPokemon;\n\n  return (\n    <div\n      className=\"modal-container\"\n      onClick={() => pokedex.hideModal()}\n    >\n      <div\n        className=\"modal-content\"\n        onClick={e => e.stopPropagation()}\n      >\n        {pokedex.selectedPokemon && (\n          <>\n            {pokedex.isSelectedPokemonLoading ? (\n              <p>Loading...</p>\n            ) : (\n              <>\n                <div className=\"modal-header\">\n                  <img src={image} />\n                  <div className=\"modal-header-content\">\n                    <h2>{name}</h2>\n                    <p>{`max. ${maxCP} CP | max. ${maxHP} HP`}</p>\n                    <div className=\"type-container\">\n                      {types.map(type => (\n                        <Type key={type} type={type} />\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"modal-table-container\">\n                  <div className=\"modal-table\">\n                    <h3>Basic properties</h3>\n                    <p>\n                      <b>Classification: </b>\n                      {`${classification}`}\n                    </p>\n                    <p>\n                      <b>Weight: </b>\n                      {`${weight.minimum} - ${weight.maximum}`}\n                    </p>\n                    <p>\n                      <b>Height: </b>\n                      {`${height.minimum} - ${height.maximum}`}\n                    </p>\n                    <p>\n                      <b>Flee rate: </b>\n                      {`${fleeRate}`}\n                    </p>\n\n                    <div className=\"modal-type-container\">\n                      <div className=\"type-container\">\n                        <b>Resistancy: </b>\n                        {resistant.map(type => (\n                          <Type key={type} type={type} />\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"modal-type-container\">\n                      <div className=\"type-container\">\n                        <b>Weaknesses: </b>\n                        {weaknesses.map(type => (\n                          <Type key={type} type={type} />\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"modal-table\">\n                    {evolutions && (\n                      <>\n                        <h3>Evolution</h3>\n                        <div className=\"evolution-container\">\n                          {evolutions.map(item => (\n                            <Card key={item.id} {...item} mini />\n                          ))}\n                        </div>\n                      </>\n                    )}\n                    {evolutionRequirements && (\n                      <p>\n                        <b>Evolution requirements: </b>\n                        {evolutionRequirements.amount}{' '}\n                        {evolutionRequirements.name}\n                      </p>\n                    )}\n\n                    <h3>Attacks - fast</h3>\n                    {attacks.fast.map(attack => (\n                      <Attack key={attack.name} attack={attack} />\n                    ))}\n\n                    <h3>Attacks - special</h3>\n                    {attacks.special.map(attack => (\n                      <Attack key={attack.name} attack={attack} />\n                    ))}\n                  </div>\n                </div>\n              </>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { view } from 'react-easy-state';\nimport pokedex from './store';\nimport List from './components/List';\nimport Modal from './components/Modal';\nimport './App.css';\n\nexport default view(() => {\n  useEffect(() => {\n    pokedex.fetchList();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"header\">\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/9/98/International_Pok%C3%A9mon_logo.svg\" />\n        <p>\n          A demo Pokédex app built with GraphQL and{' '}\n          <a href=\"https://github.com/risingstack/react-easy-state\">\n            react-easy-state\n          </a>\n          .\n        </p>\n      </div>\n      <div className=\"content-body\">\n        {pokedex.isModalOpen && <Modal />}\n        {pokedex.isPokemonsLoading ? <p>Loading...</p> : <List />}\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}